# -*- coding: utf-8 -*-
"""DiabetesPrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vqlSx5ReIOKT5fe1q_F14BpYv2czOkY5
"""

!pip install kaggle

from google.colab import files
files.upload()

!mkdir ~/.kaggle
!mv kaggle.json ~/.kaggle/

!kaggle datasets download -d uciml/pima-indians-diabetes-database

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

diabetes=pd.read_csv('pima-indians-diabetes-database.zip')

diabetes

diabetes.head()

diabetes.head(15)

diabetes.tail()

print(diabetes.size)

print(diabetes.shape)

diabetes.info

diabetes.describe

diabetes.isna().sum()

diabetes.nunique()

diabetes['Pregnancies']

diabetes['Glucose']

diabetes['BloodPressure']

diabetes['SkinThickness']

diabetes['Insulin']

diabetes['BMI']

diabetes['DiabetesPedigreeFunction']

diabetes['Age']

diabetes['Outcome']

diabetes.isna().sum()

diabetes[diabetes.duplicated('Pregnancies')]

diabetes[diabetes.duplicated('Glucose')]

diabetes[diabetes.duplicated('BloodPressure')]

diabetes[diabetes.duplicated('SkinThickness')]

diabetes[diabetes.duplicated('Insulin')]

diabetes[diabetes.duplicated('BMI')]

diabetes[diabetes.duplicated('DiabetesPedigreeFunction')]

diabetes[diabetes.duplicated('Age')]

diabetes[diabetes.duplicated('Outcome')]

glucose_levels = diabetes['Glucose']

# Plotting the graph
plt.figure(figsize=(8, 6))  # Optional: Set the figure size
plt.hist(glucose_levels, bins=10, color='red', edgecolor='black')

plt.title('Distribution of Glucose Levels')
plt.xlabel('Glucose Level')
plt.ylabel('Frequency')

plt.show()

insulin_levels = diabetes['Insulin']

# Plotting the graph
plt.figure(figsize=(8, 6))  # Optional: Set the figure size
plt.hist(insulin_levels, bins=10, color='green', edgecolor='black')

plt.title('Distribution of Insulin Levels')
plt.xlabel('Insulin Level')
plt.ylabel('Frequency')

plt.show()

bmi_values = diabetes['BMI']

# Plotting the graph
plt.figure(figsize=(8, 6))  # Optional: Set the figure size
plt.hist(bmi_values, bins=10, color='purple', edgecolor='black')

plt.title('Distribution of BMI')
plt.xlabel('BMI')
plt.ylabel('Frequency')

plt.show()

#Graphical representation of total number of diabetic and non diabetic individuals
x=np.array(["Non-Diabetic","Diabetic"])
y=diabetes['Outcome'].value_counts()
plt.bar(x,y,width=0.1,color="Blue")
plt.xlabel('Result')
plt.ylabel('Number of individuals')
plt.show()

total_people = len(diabetes)
print("Total number of people in the dataset:", total_people)

total_diabetes = diabetes['Outcome'].sum()
print("Total number of people with diabetes:", total_diabetes)
print("Percentage of people with diabetes:", total_diabetes*100/total_people)

people_without_diabetes = diabetes[diabetes['Outcome'] == 0]
total_people_without_diabetes = len(people_without_diabetes)
print("Total number of people without diabetes:", total_people_without_diabetes)

print("Percentage of people without diabetes:", people_without_diabetes*100/total_people)

# Count the number of people with diabetes and without diabetes
diabetic_count = diabetes['Outcome'].sum()
non_diabetic_count = len(diabetes) - diabetic_count

# Create a pie chart
labels = ['Diabetic', 'Non-Diabetic']
sizes = [diabetic_count, non_diabetic_count]
colors = ['#FFC107', '#2196F3']
plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)

# Add a title
plt.title('Percentage Distribution of Diabetic and Non-Diabetic People')

# Display the pie chart
plt.show()

"""Hence, we can see that 268 have diabetes and rest do not have diabetes."""

sns.heatmap(diabetes.corr(), annot = True)
plt.title("Prediction of features")
plt.show()

"""The heatmap suggests that glucose, BMI, and Age are significant factors. Insulin, Blood Pressure and Diabetes Pedigree Function are the least significant ones."""

print( "Total No of values where glucose equals to 0 is " + str(diabetes[diabetes["Glucose"]==0].shape[0]) )
print( "Total No of values where Pregnancies equals to 0 is " + str(diabetes[diabetes["Pregnancies"]==0].shape[0]) )
print( "Total No of values where BloodPressure equals to 0 is " + str(diabetes[diabetes["BloodPressure"]==0].shape[0]) )
print( "Total No of values where SkinThickness equals to 0 is " + str(diabetes[diabetes["SkinThickness"]==0].shape[0]) )
print( "Total No of values where Insulin equals to 0 is " + str(diabetes[diabetes["Insulin"]==0].shape[0]) )
print( "Total No of values where BMI equals to 0 is " + str(diabetes[diabetes["BMI"]==0].shape[0]) )
print( "Total No of values where DiabetesPedigree equals to 0 is " + str(diabetes[diabetes["DiabetesPedigreeFunction"]==0].shape[0]) )
print( "Total No of values where Age equals to 0 is " + str(diabetes[diabetes["Age"]==0].shape[0]) )

#Transposing the matrix
diabetes.T

median = np.median(diabetes)
print("Median:", median)

df=diabetes.drop(columns=["SkinThickness","DiabetesPedigreeFunction"])
X=df.drop(columns="Outcome")  #assigning the new database except outcome column to the x
y=df["Outcome"]
#target variable y typically refers to whether an individual has diabetes or not.

X.head()

y.head()

"""Here, O indicates that Diabetes is present
1 indicates that diabetes is absent in an individual.
"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=42)

#Input Traning Data
X_train

#Input Testing Data
X_test

#Output Training Data
y_train

#Output Testing Data
y_test

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score

model = LogisticRegression(C=0.001,random_state = 42)
model.fit(X_test,y_test)

y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
roc_auc = roc_auc_score(y_test, y_pred)

print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1-score:", f1)
print("ROC AUC:", roc_auc)

model.score(X_train,y_train)

model = LogisticRegression(C=0.01,random_state = 21)
model.fit(X_train,y_train)

y_train_pred = model.predict(X_train)

print(accuracy_score(y_train, y_train_pred))

model.score(X_train,y_train)

# List of evaluation scores
scores = [accuracy, precision, recall, f1, roc_auc]
score_labels = ['Accuracy', 'Precision', 'Recall', 'F1 Score', 'ROC AUC']

# Plotting the bar plot
plt.figure(figsize=(10, 6))
plt.bar(score_labels, scores, color=['b', 'g', 'r', 'c', 'm'])
plt.xlabel('Evaluation Metric')
plt.ylabel('Score')
plt.title('Model Evaluation Scores')
# Adding text above each bar with the score
for i, score in enumerate(scores):
    plt.text(i, score, f'{score:.2f}', ha='center', va='bottom', fontsize=12)
plt.show()



